from io import StringIO

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import streamlit as st
from model import Model


def getSolution(params, pbar_container=st, max_deg=15):
    """
    params: dict with keys:
        "dimensions": [x1_dim, x2_dim, x3_dim, y_dim], # –†–æ–∑–º—ñ—Ä–Ω–æ—Å—Ç—ñ –≤–µ–∫—Ç–æ—Ä—ñ–≤
        "input_file": input_file_text, # –¢–µ–∫—Å—Ç –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        "output_file": output_file + ".xlsx", # –ù–∞–∑–≤–∞ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        "degrees": [x1_deg, x2_deg, x3_deg], # –°—Ç–µ–ø–µ–Ω—ñ –ø–æ–ª—ñ–Ω–æ–º—ñ–≤ (–≤–≤–µ–¥—ñ—Ç—å –Ω—É–ª—å–æ–≤—ñ –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É —Ç–∞ –ø–æ—à—É–∫—É –Ω–∞–π–∫—Ä–∞—â–∏—Ö)
        "weights": weight_method,  # "–í–∞–≥–∏ —Ü—ñ–ª—å–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π", ["–ù–æ—Ä–º–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è", "–°–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ"]
        "poly_type": poly_type, # "–í–∏–≥–ª—è–¥ –ø–æ–ª—ñ–Ω–æ–º—ñ–≤", ["–ß–µ–±–∏—à–æ–≤–∞", "–õ–µ–∂–∞–Ω–¥—Ä–∞", "–õ–∞“ë–µ—Ä—Ä–∞", "–ï—Ä–º—ñ—Ç–∞"]
        "lambda_multiblock": lambda_option, # –í–∏–∑–Ω–∞—á–∞—Ç–∏ Œª –∑ —Ç—Ä—å–æ—Ö —Å–∏—Å—Ç–µ–º —Ä—ñ–≤–Ω—è–Ω—å
        "sample_size": sample_size, # –†–æ–∑–º—ñ—Ä –≤–∏–±—ñ—Ä–∫–∏
        ""

    """

    def get(*args):
        return [params.get(arg) for arg in args]

    additive = Model(
        input_file=params["input_file"],
        output_file=params["output_file"],
        sample_size=params["sample_size"],
        dimensions=params["dimensions"],
        degrees=params["degrees"],
        poly_type=params["poly_type"],
        lambda_multiblock=params["lambda_multiblock"],
    )

    additive.solve()
def print_array(array):
    def is_number(n):
        try:
            float(n)
        except ValueError:
            return False
        return True

    table = rf"\begin{{array}}{{|{'|'.join(['c' for i, _ in enumerate(array)])}|}}\hline "
    for e in np.array(array).T:
        table += " & ".join([f"{float(d):.4f}" if is_number(d) else d for d in e]) + r"\\ \hline"

    table += rf"\end{{array}}"
    st.latex(table)

def print_latex(obj):
    if isinstance(obj, str):
        st.latex(obj)
    elif isinstance(obj, list | np.ndarray):
        print_array(obj)


st.set_page_config(
    page_title="Lab 2 System Analysis",
    page_icon="üìà",
    layout="wide",  # "centered"
    menu_items={
        "About": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ ‚Ññ2 –∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É. –í–∏–∫–æ–Ω–∞–ª–∏: –®–∞–ø–æ—à–Ω—ñ–∫–æ–≤–∞ –°–æ—Ñ—ñ—è (–ö–ê-02) —Ç–∞ –®—É—à–∞—Ä –ê–Ω—Ç–æ–Ω (–ö–ê-01)"
    },
)

page_bg_color = "#ccffcc"
st.markdown(
    f"""
    <style>
    .reportview-container {{
        background-color: {page_bg_color};
    }}
    .centered-text {{
        text-align: center;
    }}
    .centered-button {{
        display: block;
        margin: 0 auto;
        width: 50%;
    }}
    </style>
    """,
    unsafe_allow_html=True,
)

st.title(
    "–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —É –∑–∞–¥–∞—á–∞—Ö —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ—ó –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ—Å—Ç—ñ"
)
st.write("–í–∏–∫–æ–Ω–∞–ª–∏: –®–∞–ø–æ—à–Ω—ñ–∫–æ–≤–∞ –°–æ—Ñ—ñ—è (–ö–ê-02) —Ç–∞ –®—É—à–∞—Ä –ê–Ω—Ç–æ–Ω (–ö–ê-01)")

st.markdown("<h1 class='centered-text'>–ü–æ–ª—ñ–Ω–æ–º–∏</h1>", unsafe_allow_html=True)
poly_type = st.radio("–í–∏–≥–ª—è–¥ –ø–æ–ª—ñ–Ω–æ–º—ñ–≤", ["–ß–µ–±–∏—à–æ–≤–∞", "–õ–µ–∂–∞–Ω–¥—Ä–∞", "–õ–∞“ë–µ—Ä—Ä–∞", "–ï—Ä–º—ñ—Ç–∞"])
st.write("–°—Ç–µ–ø–µ–Ω—ñ –ø–æ–ª—ñ–Ω–æ–º—ñ–≤ (–≤–≤–µ–¥—ñ—Ç—å –Ω—É–ª—å–æ–≤—ñ –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É —Ç–∞ –ø–æ—à—É–∫—É –Ω–∞–π–∫—Ä–∞—â–∏—Ö)")
cols = st.columns(3)
x1_deg = cols[0].number_input("–¥–ª—è X1", value=6, step=1, key="x1_deg")
x2_deg = cols[1].number_input("–¥–ª—è X2", value=5, step=1, key="x2_deg")
x3_deg = cols[2].number_input("–¥–ª—è X3", value=1, step=1, key="x3_deg")
st.markdown("---")

st.markdown("<h1 class='centered-text'>–í–µ–∫—Ç–æ—Ä–∏</h1>", unsafe_allow_html=True)
cols = st.columns(4)
x1_dim = cols[0].number_input("–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å X1", value=2, step=1, key="x1_dim")
x2_dim = cols[1].number_input("–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å X2", value=1, step=1, key="x2_dim")
x3_dim = cols[2].number_input("–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å X3", value=2, step=1, key="x3_dim")
y_dim = cols[3].number_input("–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å Y", value=3, step=1, key="y_dim")
st.markdown("---")

st.markdown("<h1 class='centered-text'>–î–æ–¥–∞—Ç–∫–æ–≤–æ</h1>", unsafe_allow_html=True)
weight_method = st.radio(
    "–í–∞–≥–∏ —Ü—ñ–ª—å–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π", ["–ù–æ—Ä–º–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è", "–°–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ"]
)
lambda_option = st.checkbox("–í–∏–∑–Ω–∞—á–∞—Ç–∏ Œª –∑ —Ç—Ä—å–æ—Ö —Å–∏—Å—Ç–µ–º —Ä—ñ–≤–Ω—è–Ω—å")
normed_plots = st.checkbox("–ì—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è –Ω–æ—Ä–º–æ–≤–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å")

with st.sidebar:
    st.header("–î–∞–Ω—ñ")
    input_file = st.file_uploader(
        "–§–∞–π–ª –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö", type=["csv", "txt"], key="input_file"
    )
    output_file = st.text_input(
        "–ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö", value="output", key="output_file"
    )
    col_sep = st.selectbox(
        "–†–æ–∑–¥—ñ–ª—é–≤–∞—á –∫–æ–ª–æ–Ω–æ–∫ –¥–∞–Ω–∏—Ö",
        ("—Å–∏–º–≤–æ–ª —Ç–∞–±—É–ª—è—Ü—ñ—ó (—Ç–∏–ø–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è)", "–ø—Ä–æ–±—ñ–ª", "–∫–æ–º–∞"),
        key="col_sep",
    )
    dec_sep = st.selectbox(
        "–†–æ–∑–¥—ñ–ª—é–≤–∞—á –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏",
        ("–∫—Ä–∞–ø–∫–∞ (—Ç–∏–ø–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è)", "–∫–æ–º–∞"),
        key="dec_sep",
    )


st.markdown('<div class="centered-button-container">', unsafe_allow_html=True)
if st.button("–í–ò–ö–û–ù–ê–¢–ò", key="run"):
    st.markdown("</div>", unsafe_allow_html=True)
    if input_file is None:
        st.error("**–ü–æ–º–∏–ª–∫–∞:** –≤–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
    elif x1_deg < 0 or x2_deg < 0 or x3_deg < 0:
        st.error("**–ü–æ–º–∏–ª–∫–∞:** —Å—Ç–µ–ø–µ–Ω—ñ –ø–æ–ª—ñ–Ω–æ–º—ñ–≤ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º–∏.")
    elif dec_sep == "–∫–æ–º–∞" and col_sep == "–∫–æ–º–∞":
        st.error(
            "**–ü–æ–º–∏–ª–∫–∞:** –∫–æ–º–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–µ–º –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞ –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏"
        )
    else:
        input_file_text = input_file.getvalue().decode()
        if dec_sep == "–∫–æ–º–∞":
            input_file_text = input_file_text.replace(",", ".")
        if col_sep == "–ø—Ä–æ–±—ñ–ª":
            input_file_text = input_file_text.replace(" ", "\t")
        elif col_sep == "–∫–æ–º–∞":
            input_file_text = input_file_text.replace(",", "\t")
        file_text = StringIO(input_file_text)
        df = pd.read_csv(file_text, sep="\t", header=None)
        print(len(df.iloc[:, :-1].values.flatten()))

        params = {
            "dimensions": tuple([x1_dim, x2_dim, x3_dim, y_dim]),
            "input_file": df.iloc[:, :-1].values.flatten(),
            "output_file": output_file + ".xlsx",
            "degrees": tuple([x1_deg, x2_deg, x3_deg]),
            "weights": weight_method,
            "poly_type": poly_type,
            "lambda_multiblock": lambda_option,
            "sample_size": len(df),
        }
        with st.spinner("–ó–∞—á–µ–∫–∞–π—Ç–µ..."):
            results = getSolution(params, pbar_container=st, max_deg=15)

            st.latex(results)

        st.subheader("–ì—Ä–∞—Ñ—ñ–∫–∏")

        # Display example Matplotlib figure in Streamlit
        x = np.linspace(0, 10, 100)
        y = np.sin(x)

        fig, ax = plt.subplots()
        ax.plot(x, y)
        ax.set_xlabel("X-axis")
        ax.set_ylabel("Y-axis")
        ax.set_title("Matplotlib Plot in Streamlit")
        st.pyplot(fig)

        # # TODO: Write code here to display results

        # with open(params["output_file"], "rb") as fout:
        #     st.download_button(
        #         label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª",
        #         data=fout,
        #         file_name=params["output_file"],
        #         mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        #     )
